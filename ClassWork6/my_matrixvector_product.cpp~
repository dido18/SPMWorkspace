#include <ff/pipeline.hpp>
#include <vector>
/*
Possible extension of  Classwork6
1) extra channel 
2) shared memory 
*/


using namespace ff;
using namespace std;

struct  myTask {
  myTask( int rows, int cols){
    matrix(rows);
    for(int j =0; j <rows; ++j){
       matrix[j].reserve(cols);
       for(i=0; i <cols; i++){
	 matrix[j][i] = i;
       }
    }
  }

 const std::vector<std::vector<int> matrix;
  
}

struct Firststage:ff_node_t<myTask>{
  
  EmitMatrix(int numMatrixs, int nRows, int nCols):k(numMatrixs),row(nRows),cols(nCols); 
  
  myTask * svc (myTask *){
    for( int i =0; i<k; i++){
      myTask matrix = new myTask(rows,cols);
      ff_send_out(&matrix);
    }   
  }
 
  int k , rows, cols; 
}



  struct mapWorker:ff_Map<myTask,std::vector<int>>{


    std::vector<int> * svc( myTask *){

      ff_Map<myTask>::Parallel_for(0,myTask.matrix.size(),[](const long i){
	  
	  for(int j=0;  
	}

    }
   std::vector<int> s;
  }
